{"version":3,"file":"static/js/838.7362476a.chunk.js","mappings":"8LAmCA,UA/BqB,WACnB,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAPAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,gBAAYH,EAAZ,aACdI,EAAAA,EAAAA,GAAcD,GACXE,MAAK,SAAAC,GAAI,OAAIP,EAAWO,EAAKC,QAApB,IACTC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACT,KAGF,wBACGF,EAAQc,OAAS,EAChBd,EAAQe,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QACzB,OACE,yBACE,4BACE,oCAAYF,MACZ,uBAAIE,QAHCD,EAOZ,KAED,yEAIP,C,sBCjCD,SAASE,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOjB,GAEP,YADAW,EAAOX,EAET,CAEIgB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOrB,KAAKgB,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C,sDClCO,SAAejC,EAAtB,iDAAO,OAAP,cAAO,WAA6BkC,EAAcC,GAA3C,iFACW,gCACA,mCACVC,EAAcD,EAAK,iBAAaA,GAAU,GAH3C,SAIqBE,MAAM,GAAD,OAHf,iCAGe,OAChBH,EADgB,oBAFf,oCAEe,OACkBE,EADlB,YAJ1B,WAICE,EAJD,QAOYC,GAPZ,sBAQG,IAAIC,MAAMF,GARb,wBAUwBA,EAAYG,OAVpC,eAUCC,EAVD,yBAWEA,GAXF,mE","sources":["components/MovieReviews/MovieReviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","tools/performSearch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { performSearch } from 'tools/performSearch';\n\nconst MovieReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieID } = useParams();\n\n  useEffect(() => {\n    const exactUrl = `movie/${movieID}/reviews`;\n    performSearch(exactUrl)\n      .then(data => setReviews(data.results))\n      .catch(error => console.log(error));\n  }, [movieID]);\n\n  return (\n    <ul>\n      {reviews.length > 0 ? (\n        reviews.map(({ author, id, content }) => {\n          return (\n            <li key={id}>\n              <div>\n                <p>Author: {author}</p>\n                <p>{content}</p>\n              </div>\n            </li>\n          );\n        })\n      ) : (\n        <p>We dont have any reviews for this movie yet.</p>\n      )}\n    </ul>\n  );\n};\n\nexport default MovieReviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export async function performSearch(modification, query) {\n  const baseURL = 'https://api.themoviedb.org/3/';\n  const api_key = '34cb69d93ca1c9a8ca1b557dff1c5374';\n  const querySearch = query ? `&query=${query}` : '';\n  const getResponse = await fetch(\n    `${baseURL}${modification}?api_key=${api_key}${querySearch}&page=1`\n  );\n  if (!getResponse.ok) {\n    throw new Error(getResponse);\n  }\n  const parcedResponse = await getResponse.json();\n  return parcedResponse;\n}\n"],"names":["useState","reviews","setReviews","movieID","useParams","useEffect","exactUrl","performSearch","then","data","results","catch","error","console","log","length","map","author","id","content","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","modification","query","querySearch","fetch","getResponse","ok","Error","json","parcedResponse"],"sourceRoot":""}
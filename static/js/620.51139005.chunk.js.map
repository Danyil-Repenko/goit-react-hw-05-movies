{"version":3,"file":"static/js/620.51139005.chunk.js","mappings":"8LAsCA,UAlCkB,WAChB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAPAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,gBAAYH,EAAZ,aACdI,EAAAA,EAAAA,GAAcD,GACXE,MAAK,SAAAC,GAAI,OAAIP,EAAQO,EAAKR,KAAjB,IACTS,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACR,KAGF,wBACGF,EAAKa,OAAS,GACbb,EAAKc,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,aAAcC,EAAS,EAATA,GACnCC,EAAaF,EAAY,yCACOA,GAClC,GACJ,OACE,2BACE,gBAAKG,MAAO,CAAEC,MAAO,KAArB,UACE,gBAAKC,IAAKH,EAAYI,IAAKR,OAE7B,4BACE,uBAAIA,KACJ,uCAAeC,UANVE,EAUZ,KAGR,C,sBCpCD,SAASM,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOvB,GAEP,YADAiB,EAAOjB,EAET,CAEIsB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAO1B,KAAKqB,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C,sDClCO,SAAetC,EAAtB,iDAAO,OAAP,cAAO,WAA6BuC,EAAcC,GAA3C,iFACW,gCACA,mCACVC,EAAcD,EAAK,iBAAaA,GAAU,GAH3C,SAIqBE,MAAM,GAAD,OAHf,iCAGe,OAChBH,EADgB,oBAFf,oCAEe,OACkBE,EADlB,YAJ1B,WAICE,EAJD,QAOYC,GAPZ,sBAQG,IAAIC,MAAMF,GARb,wBAUwBA,EAAYG,OAVpC,eAUCC,EAVD,yBAWEA,GAXF,mE","sources":["components/MovieCast/MovieCast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","tools/performSearch.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { performSearch } from 'tools/performSearch';\n\nconst MovieCast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieID } = useParams();\n\n  useEffect(() => {\n    const exactUrl = `movie/${movieID}/credits`;\n    performSearch(exactUrl)\n      .then(data => setCast(data.cast))\n      .catch(error => console.log(error));\n  }, [movieID]);\n\n  return (\n    <ul>\n      {cast.length > 0 &&\n        cast.map(({ name, character, profile_path, id }) => {\n          const image_path = profile_path\n            ? `https://image.tmdb.org/t/p/w500${profile_path}`\n            : '';\n          return (\n            <li key={id}>\n              <div style={{ width: 100 }}>\n                <img src={image_path} alt={name} />\n              </div>\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default MovieCast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export async function performSearch(modification, query) {\n  const baseURL = 'https://api.themoviedb.org/3/';\n  const api_key = '34cb69d93ca1c9a8ca1b557dff1c5374';\n  const querySearch = query ? `&query=${query}` : '';\n  const getResponse = await fetch(\n    `${baseURL}${modification}?api_key=${api_key}${querySearch}&page=1`\n  );\n  if (!getResponse.ok) {\n    throw new Error(getResponse);\n  }\n  const parcedResponse = await getResponse.json();\n  return parcedResponse;\n}\n"],"names":["useState","cast","setCast","movieID","useParams","useEffect","exactUrl","performSearch","then","data","catch","error","console","log","length","map","name","character","profile_path","id","image_path","style","width","src","alt","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","modification","query","querySearch","fetch","getResponse","ok","Error","json","parcedResponse"],"sourceRoot":""}
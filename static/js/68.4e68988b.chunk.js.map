{"version":3,"file":"static/js/68.4e68988b.chunk.js","mappings":"oOAEaA,E,OAASC,GAAAA,IAAH,mE,SCANC,EAAe,SAAC,GAOtB,IANLC,EAMI,EANJA,YACAC,EAKI,EALJA,eACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,4BACE,gBAAKC,MAAO,CAAEC,MAAO,KAArB,UACE,SAACV,EAAD,CACEW,IAAG,yCAAoCR,GACvCS,IAAG,UAAKR,EAAL,gBAGP,4BACE,yBACGA,EADH,KACqBI,EAAaK,MAAM,EAAG,GAD3C,QAGA,oCAAYR,EAAOS,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,UACjD,wCAAgBC,KAAKC,MAAqB,GAAfZ,GAA3B,QACA,uBAAID,SAIX,E,SCaD,EAnCc,WAAO,IAAD,IAClB,GAA0Bc,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,qBADDC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OACMC,QAAQC,aAApB,aAAG,EAAwBC,YAA3B,QAAmC,IAOrD,OALAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,gBAAYX,IAC1BY,EAAAA,EAAAA,GAAcD,GAAUE,MAAK,SAAAC,GAAI,OAAIf,EAASe,EAAb,GAClC,GAAE,CAACd,KAGF,4BACE,mBAAQe,KAAK,SAASC,QAAS,kBAAMd,EAASE,EAAf,EAA/B,sBAGA,yBAAMN,GAASnB,EAAamB,MAC5B,2BACE,yBACE,SAAC,KAAD,CAASmB,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,2BAGJ,0BACE,SAAC,EAAAC,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,UAKT,C,sBCvCD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOhB,KAAKW,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C,sDClCO,SAAe7B,EAAtB,iDAAO,OAAP,cAAO,WAA6B8B,EAAcC,GAA3C,iFACW,gCACA,mCACVC,EAAcD,EAAK,iBAAaA,GAAU,GAH3C,SAIqBE,MAAM,GAAD,OAHf,iCAGe,OAChBH,EADgB,oBAFf,oCAEe,OACkBE,EADlB,YAJ1B,WAICE,EAJD,QAOYC,GAPZ,sBAQG,IAAIC,MAAMF,GARb,wBAUwBA,EAAYG,OAVpC,eAUCC,EAVD,yBAWEA,GAXF,mE","sources":["components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","pages/Movie/Movie.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","tools/performSearch.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Poster = styled.img`\ndisplay:block;\nwidth: 100%;\nheight: auto;`","import { Poster } from 'components/MovieDetails/MovieDetails.styled';\n\nexport const MovieDetails = ({\n  poster_path,\n  original_title,\n  genres,\n  overview,\n  vote_average,\n  release_date,\n}) => {\n  return (\n    <div>\n      <div style={{ width: 150 }}>\n        <Poster\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={`${original_title} poster`}\n        />\n      </div>\n      <div>\n        <p>\n          {original_title} ({release_date.slice(0, 4)})\n        </p>\n        <p>Genres: {genres.map(genre => genre.name).join(', ')}</p>\n        <p>User Score: {Math.round(vote_average * 10)}%</p>\n        <p>{overview}</p>\n      </div>\n    </div>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect, Suspense, useRef } from 'react';\nimport { NavLink, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\nimport { performSearch } from 'tools/performSearch';\n\nconst Movie = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieID } = useParams();\n  const navigate = useNavigate();\n  const location = useRef(useLocation());\n  const backLinkHref = location.current.state?.from ?? '/';\n\n  useEffect(() => {\n    const exactUrl = `movie/${movieID}`;\n    performSearch(exactUrl).then(data => setMovie(data));\n  }, [movieID]);\n\n  return (\n    <div>\n      <button type=\"button\" onClick={() => navigate(backLinkHref)}>\n        Go back\n      </button>\n      <div>{movie && MovieDetails(movie)}</div>\n      <ul>\n        <li>\n          <NavLink to=\"cast\">Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n      </ul>\n      <div>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export async function performSearch(modification, query) {\n  const baseURL = 'https://api.themoviedb.org/3/';\n  const api_key = '34cb69d93ca1c9a8ca1b557dff1c5374';\n  const querySearch = query ? `&query=${query}` : '';\n  const getResponse = await fetch(\n    `${baseURL}${modification}?api_key=${api_key}${querySearch}&page=1`\n  );\n  if (!getResponse.ok) {\n    throw new Error(getResponse);\n  }\n  const parcedResponse = await getResponse.json();\n  return parcedResponse;\n}\n"],"names":["Poster","styled","MovieDetails","poster_path","original_title","genres","overview","vote_average","release_date","style","width","src","alt","slice","map","genre","name","join","Math","round","useState","movie","setMovie","movieID","useParams","navigate","useNavigate","backLinkHref","useRef","useLocation","current","state","from","useEffect","exactUrl","performSearch","then","data","type","onClick","to","Suspense","fallback","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","modification","query","querySearch","fetch","getResponse","ok","Error","json","parcedResponse"],"sourceRoot":""}